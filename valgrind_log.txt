==4001== Memcheck, a memory error detector
==4001== Copyright (C) 2002-2024, and GNU GPL'd, by Julian Seward et al.
==4001== Using Valgrind-3.24.0.GIT-lbmacos and LibVEX; rerun with -h for copyright info
==4001== Command: ./fdf test_maps/42.fdf
==4001== Parent PID: 3877
==4001== 
--4001-- VALGRIND INTERNAL ERROR: Valgrind received a signal 11 (SIGSEGV) - exiting
--4001-- si_code=1;  Faulting address: 0x700076627D3D;  sp: 0x700006eb07a0

valgrind: the 'impossible' happened:
   Killed by fatal signal

host stacktrace:
==4001==    at 0x25808EE06: ??? (in /goinfre/imouhtad/homebrew/Cellar/valgrind/HEAD-ef8cbb3/libexec/valgrind/memcheck-amd64-darwin)
==4001==    by 0x2580717C2: ??? (in /goinfre/imouhtad/homebrew/Cellar/valgrind/HEAD-ef8cbb3/libexec/valgrind/memcheck-amd64-darwin)
==4001==    by 0x2580D7B14: ??? (in /goinfre/imouhtad/homebrew/Cellar/valgrind/HEAD-ef8cbb3/libexec/valgrind/memcheck-amd64-darwin)
==4001==    by 0x2580BACA0: ??? (in /goinfre/imouhtad/homebrew/Cellar/valgrind/HEAD-ef8cbb3/libexec/valgrind/memcheck-amd64-darwin)
==4001==    by 0x2580BA469: ??? (in /goinfre/imouhtad/homebrew/Cellar/valgrind/HEAD-ef8cbb3/libexec/valgrind/memcheck-amd64-darwin)
==4001==    by 0x2580B88DE: ??? (in /goinfre/imouhtad/homebrew/Cellar/valgrind/HEAD-ef8cbb3/libexec/valgrind/memcheck-amd64-darwin)
==4001==    by 0x2580B64EA: ??? (in /goinfre/imouhtad/homebrew/Cellar/valgrind/HEAD-ef8cbb3/libexec/valgrind/memcheck-amd64-darwin)
==4001==    by 0x2580C7FA9: ??? (in /goinfre/imouhtad/homebrew/Cellar/valgrind/HEAD-ef8cbb3/libexec/valgrind/memcheck-amd64-darwin)

sched status:
  running_tid=1

Thread 1: status = VgTs_Runnable syscall unix:197 (lwpid 771)
==4001==    at 0x1000C62CA: __mmap (in /usr/lib/dyld)
==4001==    by 0x1000C48F9: mmap (in /usr/lib/dyld)
==4001==    by 0x100089703: ImageLoaderMachO::validateFirstPages(linkedit_data_command const*, int, unsigned char const*, unsigned long, long long, ImageLoader::LinkContext const&) (in /usr/lib/dyld)
==4001==    by 0x10008F5B5: ImageLoaderMachOCompressed::instantiateFromFile(char const*, int, unsigned char const*, unsigned long, unsigned long long, unsigned long long, stat const&, unsigned int, unsigned int, linkedit_data_command const*, encryption_info_command const*, ImageLoader::LinkContext const&) (in /usr/lib/dyld)
==4001==    by 0x1000887A7: ImageLoaderMachO::instantiateFromFile(char const*, int, unsigned char const*, unsigned long, unsigned long long, unsigned long long, stat const&, ImageLoader::LinkContext const&) (in /usr/lib/dyld)
==4001==    by 0x100073EE4: dyld::loadPhase6(int, stat const&, char const*, dyld::LoadContext const&) (in /usr/lib/dyld)
==4001==    by 0x10007BCCC: dyld::loadPhase5(char const*, char const*, dyld::LoadContext const&, unsigned int&, std::__1::vector<char const*, std::__1::allocator<char const*> >*) (in /usr/lib/dyld)
==4001==    by 0x10007B6DC: dyld::loadPhase4(char const*, char const*, dyld::LoadContext const&, unsigned int&, std::__1::vector<char const*, std::__1::allocator<char const*> >*) (in /usr/lib/dyld)
==4001==    by 0x10007B446: dyld::loadPhase3(char const*, char const*, dyld::LoadContext const&, unsigned int&, std::__1::vector<char const*, std::__1::allocator<char const*> >*) (in /usr/lib/dyld)
==4001==    by 0x10007AB00: dyld::loadPhase1(char const*, char const*, dyld::LoadContext const&, unsigned int&, std::__1::vector<char const*, std::__1::allocator<char const*> >*) (in /usr/lib/dyld)
==4001==    by 0x100073A7C: dyld::loadPhase0(char const*, char const*, dyld::LoadContext const&, unsigned int&, std::__1::vector<char const*, std::__1::allocator<char const*> >*) (in /usr/lib/dyld)
==4001==    by 0x100073639: dyld::load(char const*, dyld::LoadContext const&, unsigned int&) (in /usr/lib/dyld)
==4001==    by 0x10007C460: dyld::libraryLocator(char const*, bool, char const*, ImageLoader::RPathChain const*, unsigned int&) (in /usr/lib/dyld)
==4001==    by 0x1000846F8: ImageLoader::recursiveLoadLibraries(ImageLoader::LinkContext const&, bool, ImageLoader::RPathChain const&, char const*) (in /usr/lib/dyld)
==4001==    by 0x1000849CF: ImageLoader::recursiveLoadLibraries(ImageLoader::LinkContext const&, bool, ImageLoader::RPathChain const&, char const*) (in /usr/lib/dyld)
==4001==    by 0x1000849CF: ImageLoader::recursiveLoadLibraries(ImageLoader::LinkContext const&, bool, ImageLoader::RPathChain const&, char const*) (in /usr/lib/dyld)
==4001==    by 0x1000849CF: ImageLoader::recursiveLoadLibraries(ImageLoader::LinkContext const&, bool, ImageLoader::RPathChain const&, char const*) (in /usr/lib/dyld)
==4001==    by 0x1000849CF: ImageLoader::recursiveLoadLibraries(ImageLoader::LinkContext const&, bool, ImageLoader::RPathChain const&, char const*) (in /usr/lib/dyld)
==4001==    by 0x1000849CF: ImageLoader::recursiveLoadLibraries(ImageLoader::LinkContext const&, bool, ImageLoader::RPathChain const&, char const*) (in /usr/lib/dyld)
==4001==    by 0x1000849CF: ImageLoader::recursiveLoadLibraries(ImageLoader::LinkContext const&, bool, ImageLoader::RPathChain const&, char const*) (in /usr/lib/dyld)
==4001==    by 0x1000849CF: ImageLoader::recursiveLoadLibraries(ImageLoader::LinkContext const&, bool, ImageLoader::RPathChain const&, char const*) (in /usr/lib/dyld)
==4001==    by 0x10008331B: ImageLoader::link(ImageLoader::LinkContext const&, bool, bool, bool, ImageLoader::RPathChain const&, char const*) (in /usr/lib/dyld)
==4001==    by 0x100075A00: dyld::link(ImageLoader*, bool, bool, ImageLoader::RPathChain const&, unsigned int) (in /usr/lib/dyld)
==4001==    by 0x10007798F: dyld::_main(macho_header const*, unsigned long, int, char const**, char const**, char const**, unsigned long*) (in /usr/lib/dyld)
==4001==    by 0x100071226: dyldbootstrap::start(dyld3::MachOLoaded const*, int, char const**, dyld3::MachOLoaded const*, unsigned long*) (in /usr/lib/dyld)
==4001==    by 0x100071024: _dyld_start (in /usr/lib/dyld)
==4001==    by 0x1: ???
==4001==    by 0x1049757DE: ???
==4001==    by 0x1049757E4: ???
client stack range: [0x104176000 0x104975FFF] client SP: 0x10496A5E8
valgrind stack range: [0x700006DB2000 0x700006EB1FFF] top usage: 17088 of 1048576


Note: see also the FAQ in the source distribution.
It contains workarounds to several common problems.
In particular, if Valgrind aborted or crashed after
identifying problems in your program, there's a good chance
that fixing those problems will prevent Valgrind aborting or
crashing, especially if it happened in m_mallocfree.c.

If that doesn't help, please report this bug to: www.valgrind.org

In the bug report, send all the above text, the valgrind
version, and what OS and version you are using.  Thanks.

